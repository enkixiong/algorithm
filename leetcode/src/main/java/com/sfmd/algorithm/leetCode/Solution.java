package com.sfmd.algorithm.leetCode;

import com.alibaba.fastjson.JSON;

import java.util.Stack;

public class Solution {

    /**
     * 暴力解法，超出时间限制
     */
    public int maxScoreSightseeingPair2(int[] score) {

        int max = 0;
        for (int i = 0; i < score.length; i++) {
            for (int j = i + 1; j < score.length; j++) {
                int current = score[i] + score[j] + i - j;
                if (current > max) {
                    max = current;
                    System.out.println(String.format("(%d,%d) -> %d ", i, j, max));
                }
            }
        }

        return max;
    }

    /**
     * 单调栈
     */
    public int maxScoreSightseeingPair3(int[] score) {
        Stack<InnerInfo> stackLeft = new Stack<>();
        Stack<InnerInfo> stackRight = new Stack<>();
        stackLeft.push(new InnerInfo(-1, -1, Integer.MIN_VALUE));
        stackRight.push(new InnerInfo(0, 0, Integer.MIN_VALUE));
        for (int i = 0; i < score.length-1; i++) {
            int cal = score[i] + i;
            if (cal >= stackLeft.peek().cal) {
                stackLeft.push(new InnerInfo(score[i], i, cal));
            }
        }
        for (int i = 1; i <= score.length-1; i++) {
            int cal = score[i] - i;
            if (cal <= stackRight.peek().cal) {
                stackRight.push(new InnerInfo(score[i], i, cal));
            }
        }
        int max = 0;


        max = Math.max(stackLeft.peek().cal + stackRight.peek().cal, max);
        return max;
    }

    public int maxScoreSightseeingPair(int[] score) {

        int max = 0;
        int answer = 0;

        for (int i = 0; i < score.length; i++){
            answer = Math.max(answer, max+score[i]-i);

            max = Math.max(score[i]+i,max);

        }
        return answer;
    }


    private static class InnerInfo {
        private int value;
        private int offset;
        private int cal;


        public InnerInfo(int value, int offset, int cal) {
            this.value = value;
            this.offset = offset;
            this.cal = cal;
        }

    }


    public static void main(String[] args) {
//        System.out.println(new Solution().maxScoreSightseeingPair(new int[]{8,1,5,2,6}) == 11);
//        System.out.println(new Solution().maxScoreSightseeingPair(new int[]{1,2,3,4,5,6}) == 10);
//        System.out.println(new Solution().maxScoreSightseeingPair(new int[]{3,7,2,3}) == 9);
//        System.out.println(new Solution().maxScoreSightseeingPair(new int[]{2,7,5,8,8,8}) == 15);

        int[] data = new int[]{377, 185, 373, 476, 467, 82, 957, 406, 383, 393, 269, 266, 518, 855, 809, 11, 658, 26, 170, 114, 263, 452, 689, 274, 893, 704, 258, 264, 955, 7, 317, 223, 141, 521, 77, 461, 330, 853, 520, 152, 289, 838, 590, 679, 466, 546, 982, 153, 132, 801, 972, 976, 893, 480, 707, 410, 825, 561, 392, 970, 116, 399, 284, 777, 266, 722, 119, 967, 77, 493, 535, 223, 924, 413, 162, 931, 865, 212, 80, 860, 164, 538, 444, 913, 762, 425, 6, 390, 174, 435, 915, 923, 511, 224, 316, 161, 343, 798, 733, 433, 776, 703, 643, 284, 77, 197, 928, 479, 949, 763, 906, 980, 76, 491, 631, 474, 25, 294, 795, 512, 383, 268, 176, 21, 562, 457, 82, 783, 974, 504, 291, 588, 561, 126, 336, 624, 776, 406, 680, 668, 267, 727, 558, 900, 601, 728, 504, 481, 981, 432, 302, 602, 686, 723, 451, 649, 789, 678, 519, 639, 63, 274, 704, 375, 656, 905, 984, 37, 827, 9, 500, 201, 749, 602, 846, 540, 120, 22, 744, 35, 595, 434, 406, 155, 853, 114, 543, 777, 988, 66, 871, 434, 230, 731, 996, 795, 818, 420, 604, 22, 56, 195, 623, 940, 750, 104, 608, 546, 480, 435, 881, 375, 202, 708, 195, 596, 521, 433, 249, 812, 709, 634, 151, 968, 583, 801, 178, 468, 745, 99, 453, 904, 46, 889, 873, 731, 953, 608, 196, 894, 187, 816, 901, 864, 493, 407, 558, 637, 275, 917, 840, 674, 569, 817, 434, 484, 484, 826, 718, 200, 116, 930, 951, 160, 841, 817, 80, 465, 173, 179, 424, 593, 338, 362, 733, 695, 176, 17, 287, 810, 464, 583, 671, 836, 165, 229, 392, 269, 537, 363, 239, 154, 836, 213, 937, 245, 531, 437, 102, 415, 959, 328, 354, 784, 656, 838, 565, 928, 513, 159, 333, 835, 627, 430, 383, 359, 514, 641, 91, 920, 173, 17, 120, 513, 862, 988, 687, 444, 288, 529, 775, 520, 867, 112, 645, 367, 889, 456, 652, 437, 80, 4, 167, 286, 977, 941, 559, 66, 63, 555, 50, 861, 628, 960, 481, 446, 572, 668, 151, 541, 410, 922, 403, 30, 495, 924, 463, 8, 474, 543, 199, 185, 195, 691, 466, 204, 950, 101, 906, 316, 198, 968, 700, 347, 435, 431, 219, 555, 157, 48, 253, 51, 699, 657, 250, 772, 457, 709, 514, 15, 764, 502, 581, 800, 800, 873, 342, 955, 42, 5, 606, 837, 198, 10, 378, 142, 493, 547, 993, 326, 217, 319, 234, 55, 816, 168, 761, 600, 162, 719, 435, 289, 506, 238, 150, 507, 995, 278, 342, 334, 830, 483, 77, 444, 812, 710, 193, 186, 751, 122, 709, 20, 998, 589, 605, 180, 146, 905, 228, 783, 475, 86, 230, 720, 536, 264, 590, 287, 377, 956, 208, 285, 270, 854, 386, 647, 21, 995, 472, 453, 185, 616, 589, 700, 228, 576, 558, 527, 95, 184, 120, 162, 212, 334, 196, 268, 697, 731, 391, 942, 898, 231, 101, 789, 7, 380, 217, 30, 715, 694, 644, 383, 196, 867, 4, 668, 813, 351, 84, 373, 174, 133, 651, 756, 576, 975, 91, 738, 109, 128, 406, 530, 843, 492, 856, 781, 829, 701, 665, 851, 514, 65, 70, 18, 549, 667, 460, 139, 823, 154, 400, 776, 383, 70, 538, 966, 948, 912, 83, 721, 803, 969, 764, 999, 925, 995, 367, 743, 827, 407, 688, 563, 683, 524, 964, 957, 534, 156, 135, 299, 550, 315, 807, 517, 390, 591, 572, 505, 68, 218, 979, 608, 581, 582, 819, 291, 56, 381, 960, 121, 732, 903, 673, 861, 273, 940, 366, 320, 390, 283, 832, 287, 283, 346, 290, 852, 121, 205, 224, 464, 890, 527, 109, 999, 464, 933, 702, 576, 160, 176, 941, 781, 252, 72, 318, 930, 440, 697, 556, 495, 557, 415, 737, 417, 953, 225, 261, 430, 373, 80, 216, 50, 414, 636, 86, 607, 587, 253, 555, 677, 732, 507, 481, 721, 944, 980, 898, 918, 423, 643, 406, 299, 143, 148, 242, 138, 303, 257, 688, 773, 315, 148, 930, 141, 952, 84, 755, 939, 564, 749, 805, 86, 852, 516, 672, 840, 197, 976, 228, 830, 855, 158, 639, 185, 844, 95, 562, 86, 954, 625, 157, 574, 424, 216, 252, 412, 332, 275, 697, 731, 955, 83, 470, 323, 575, 152, 240, 322, 644, 904, 610, 640, 712, 996, 38, 327, 756, 975, 212, 990, 821, 769, 5, 453, 915, 230, 945, 67, 919, 739, 151, 642, 519, 10, 483, 191, 229, 780, 444, 289, 716, 134, 245, 810, 366, 811, 564, 36, 74, 131, 811, 322, 234, 454, 305, 272, 78, 223, 771, 591, 679, 857, 4, 965, 192, 762, 649, 329, 281, 699, 20, 915, 907, 127, 214, 521, 716, 923, 171, 418, 570, 193, 640, 154, 148, 118, 276, 931, 411, 664, 662, 392, 431, 802, 90, 727, 51, 860, 756, 788, 560, 778, 904, 537, 203, 614, 448, 598, 765, 587, 405, 235, 530, 685, 566, 529, 199, 770, 239, 722, 877, 833, 596, 629, 249, 926, 223, 652, 258, 426, 925, 572, 217, 810, 70, 285, 845, 357, 478, 638, 807, 281, 387, 252, 979, 939, 984, 122, 869, 744, 378, 532, 54, 67, 65, 72, 721, 84, 985, 112, 718, 91, 906, 17, 852, 87, 970, 162, 787, 500, 930, 961, 691, 479, 20, 683, 838, 273, 125, 905, 739, 69, 463, 410, 102, 583, 531, 457, 344, 977, 644, 617, 699, 614, 417, 270, 527, 248, 558, 656, 563, 224, 98, 527, 91, 399, 338, 32, 209, 307, 897, 280, 349, 999, 957, 313, 394, 543, 167, 401, 520, 653, 362, 823, 989, 655, 929, 291, 217, 376, 116, 731, 887, 476, 854, 563, 459, 863, 556, 498, 178, 160, 181, 854, 839, 309, 72, 44, 654, 43, 294, 611, 629, 688, 878, 603, 9, 872, 166, 217, 623, 985, 219, 378, 707, 30, 508, 993, 116, 805, 404, 229, 386, 142, 428, 494, 924, 568, 916, 66};

//        System.out.println(new Solution().maxScoreSightseeingPair2(data));
        System.out.println(new Solution().maxScoreSightseeingPair(data));

//        System.out.println(data[563]);
//        System.out.println(data[564]);
//        System.out.println(data[565]);

    }

}
